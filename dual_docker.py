# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DualDocker
                                 A QGIS plugin
 This plugin creates an extra window to dock your panels on a second monitor
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-07-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Emiel Verstegen
        email                : emiel@verstegen.email
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QTimer
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .dual_docker_dialog import DualDockerDialog
import os.path
from PyQt5.QtWidgets import QDockWidget
from PyQt5.QtCore import QEvent, QObject, QCoreApplication, Qt
from PyQt5.QtGui import QCursor, QMouseEvent
from qgis.PyQt.QtWidgets import QApplication
from qgis.core import QgsMessageLog, Qgis


class DualDocker:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DualDocker_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Dual Docker')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.plugin_button = None
        self.dlg = None
        self.selectedWidget = None

        self.eventFilter: DualDockerEventFilter = None
        self.reparentFlag = False
        self.reparentNewParent = None
        self.reparentRecent = False

        self.timer = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DualDocker', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        action.setCheckable(True)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/dual_docker/icon.png'
        self.plugin_button = self.add_action(
            icon_path,
            text=self.tr(u'Dual Docker'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Dual Docker'),
                action)
            self.iface.removeToolBarIcon(action)

        self.unregisterEventFilter()

        if self.timer:
            self.timer.stop()
            self.timer.timeout.disconnect(self.checkReparentFlag)


    def registerEventFilter(self):
        if not self.eventFilter:
            self.eventFilter = DualDockerEventFilter(self)

        QApplication.instance().installEventFilter(self.eventFilter)

    def unregisterEventFilter(self):
        if self.eventFilter:
            QApplication.instance().removeEventFilter(self.eventFilter)
            self.eventFilter.deleteLater()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = DualDockerDialog(self)

        self.dlg.setupUi()
        self.registerEventFilter()
        # show the window
        self.dlg.show()

        #Create a timer to check for reparenting @TODO: maybe this can be started only when dragging a QDockWidget
        self.timer = QTimer()
        self.timer.timeout.connect(self.checkReparentFlag)
        self.timer.start(100)
        self.plugin_button.setChecked(True)


    def checkReparentFlag(self):
        """
        Checks if there is a QDockWidget that needs reparenting and initiates the reparenting.
        """
        if self.reparentFlag and not self.reparentRecent:
            self.reparent(self.selectedWidget, self.reparentNewParent)
            #self.drop_and_pick(self.selectedWidget)
            self.reparentFlag = False


    def reparent(self, widget, new_parent):
        """
        Changes the parent QWidget of a QDockWidget, handles the geometry and dockable areas
        """
        # Change the parent
        widget.setParent(new_parent)

        widget.setFloating(True)

        # Adjust the widget's position to be within the screen's geometry
        global_pos = QCursor.pos()
        widget.setGeometry(global_pos.x(), global_pos.y(), widget.width(), widget.height())
        widget.setAllowedAreas(Qt.AllDockWidgetAreas)
        # Show the widget
        widget.show()
        self.reparentRecent = True

    def drop_and_pick(self, widget):
        """
        Emulates releasing and clicking the mouse on a widget to stop the drag event and pick it back up.
        NOT WORKING AS INTENDED
        """
        cursor_pos = QCursor.pos()
        # Create a mouse release event
        release_event = QMouseEvent(QEvent.MouseButtonRelease, cursor_pos, Qt.LeftButton,
                                    Qt.LeftButton, Qt.NoModifier)

        # Post the mouse release event
        QCoreApplication.postEvent(widget, release_event)

        # Create a mouse press event
        press_event = QMouseEvent(QEvent.MouseButtonPress, cursor_pos, Qt.LeftButton,
                                  Qt.LeftButton, Qt.NoModifier)

        # Post the mouse press event
        QCoreApplication.postEvent(widget, press_event)

class DualDockerEventFilter(QObject):

    def __init__(self, parent: QObject = None) -> None:
        super().__init__(parent.iface)
        self.parent = parent #Dual Docker class
        self.dual_docker_window = parent.dlg #DualDocker QMainWindow
        self.main_window = parent.iface.mainWindow() #QGIS application QMainWindow
        self.currentWidgetParent = None
        self.dragging = False
        self.dockWidget = None
        self.cursorOverDualDocker = None
        self.cursorOverMainWindow = None

    def eventFilter(self, caller: QObject, event: QEvent) -> bool:
        """
        Handles the dragging. Determines which QDockWidget is being dragged, and if it is entering the DualDocker window
        or the QGIS MainWindow
        """

        # @TODO: This is working, but not with floating widgets. Somehow the Titlebar is not part of the Widget.
        if event.type() == QEvent.MouseButtonPress:
            # Check if the widget under the cursor is a QDockWidget
            widget = QApplication.widgetAt(QCursor.pos())
            if isinstance(widget, QDockWidget):
                self.dockWidget = widget
                self.parent.selectedWidget = widget
                self.currentWidgetParent = widget.parent()
                self.dragging = True
                QgsMessageLog.logMessage(self.dockWidget.objectName(), 'DualDocker', level=Qgis.Info)


        elif event.type() == QEvent.MouseMove:
            global_pos = QCursor.pos()
            self.cursorOverDualDocker = self.parent.dlg.geometry().contains(global_pos)
            self.cursorOverMainWindow = self.parent.iface.mainWindow().frameGeometry().contains(global_pos)

        elif event.type() == QEvent.MouseButtonRelease:
            if self.dragging and self.dockWidget is not None:
                # Handle the drop event
                self.dockWidget = None
                self.dragging = False
                self.parent.reparentRecent = False


        if self.dragging:

            if self.currentWidgetParent == self.main_window:
                # Dragging a widget which is connected to main window
                if self.cursorOverDualDocker and not self.cursorOverMainWindow:
                    #self.reparent(self.dual_docker_window)
                    self.parent.reparentFlag = True
                    self.parent.reparentNewParent = self.dual_docker_window

            elif self.currentWidgetParent == self.dual_docker_window:
                # Dragging a widget which is connected to main window
                if not self.cursorOverDualDocker and self.cursorOverMainWindow:
                    #self.reparent(self.dual_docker_window)
                    self.parent.reparentFlag = True
                    self.parent.reparentNewParent = self.main_window


        return False