# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DualDocker
                                 A QGIS plugin
 This plugin creates an extra window to dock your panels on a second monitor
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-11
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Emiel Verstegen
        email                : emiel@verstegen.email
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QMetaObject
from qgis.PyQt.QtGui import QIcon, QMouseEvent
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .dual_docker_dialog import DualDockerDialog
import os.path
from PyQt5.QtWidgets import QDockWidget, QToolBar, QPushButton
from PyQt5.QtCore import QEvent, QDataStream, Qt, QObject
from PyQt5.QtGui import QCursor
from qgis.PyQt.QtWidgets import QApplication, QMessageBox
from qgis.core import QgsMessageLog, Qgis

class DualDocker:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DualDocker_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Dual Docker')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.dlg = None
        self.eventFilter: MyEventFilter = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DualDocker', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/dual_docker/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Dual Docker'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        self.registerEventFilter()


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Dual Docker'),
                action)
            self.iface.removeToolBarIcon(action)

        self.unregisterEventFilter()

    def registerEventFilter(self):
        if not self.eventFilter:
            #self.eventFilter = MyEventFilter(self.iface.mapCanvas()) #this works
            self.eventFilter = MyEventFilter(self)

        #self.iface.mapCanvas().viewport().installEventFilter(self.eventFilter)
        QApplication.instance().installEventFilter(self.eventFilter)

    def unregisterEventFilter(self):
        if self.eventFilter:
            QApplication.instance().removeEventFilter(self.eventFilter)
            self.eventFilter.deleteLater()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = DualDockerDialog()

        # show the window
        self.dlg.show()




class MyEventFilter(QObject):

    def __init__(self, parent: QObject = None) -> None:
        super().__init__(parent.iface)
        self.parent = parent
        self.dragging = False
        self.dockWidget = None
        self.currentScreen = None
        self.desktop = QApplication.instance().desktop()


    def eventFilter(self, caller: QObject, event: QEvent) -> bool:
        if event.type() == QEvent.MouseButtonPress:
            # Check if the widget under the cursor is a QDockWidget
            widget = QApplication.widgetAt(QCursor.pos())
            if isinstance(widget, QDockWidget):
                self.dockWidget = widget
                self.dragging = True
                QgsMessageLog.logMessage(self.dockWidget.objectName(), 'DualDocker', level=Qgis.Info)

        elif event.type() == QEvent.MouseMove:
            if self.dragging and self.dockWidget is not None:
                # Get the global mouse position
                globalPos = QCursor.pos()
                # Get the screen number for the global mouse position
                screenNumber = QApplication.desktop().screenNumber(globalPos)
                # Check if the screen number has changed
                if screenNumber != self.currentScreen:
                    mainWindowScreen = self.desktop.screenNumber(self.parent.iface.mainWindow())
                    dualDockerScreen = self.desktop.screenNumber(self.parent.dlg)
                    # Handle the screen change
                    QgsMessageLog.logMessage(f"Dockwidget {self.dockWidget.objectName()} was dragged from screen to screen "
                                             f"{screenNumber}. Main window is on screen "
                                             f"{mainWindowScreen}. Dual Docker is on screen {dualDockerScreen}.",
                                             'DualDocker', level=Qgis.Info)
                    QgsMessageLog.logMessage(f"Current parent is {self.dockWidget.parent().objectName()}",
                                             'DualDocker', level=Qgis.Info)
                    self.currentScreen = screenNumber

                    if self.currentScreen == mainWindowScreen:
                        #Moving to Main WindowScreen, reparenting to Main Window
                        QgsMessageLog.logMessage(f"Attatching {self.dockWidget.objectName()} to Main Window",
                                                 'DualDocker', level=Qgis.Info)
                        self.reparent(self.parent.iface.mainWindow())

                    elif self.currentScreen == dualDockerScreen:
                        QgsMessageLog.logMessage(f"Attatching {self.dockWidget.objectName()} to Dual Docker",
                                                 'DualDocker', level=Qgis.Info)
                        self.reparent(self.parent.dlg)

        elif event.type() == QEvent.MouseButtonRelease:
            if self.dragging and self.dockWidget is not None:
                # Handle the drop event
                self.dockWidget = None
                self.dragging = False
        return False

    def reparent(self, new_parent):
        QgsMessageLog.logMessage(f"Reparenting called",
                                 'DualDocker', level=Qgis.Info)
        if self.dockWidget.parent() != new_parent:
            QgsMessageLog.logMessage(f"Start reparenting",
                                     'DualDocker', level=Qgis.Info)

            QgsMessageLog.logMessage(f"Current parent {self.dockWidget.parent().objectName()}: {self.dockWidget.parent()}",
                                     'DualDocker', level=Qgis.Info)
            QgsMessageLog.logMessage(f"New Parent parent {new_parent.objectName()}: {new_parent}",
                                     'DualDocker', level=Qgis.Info)

            cursor_pos = QCursor.pos()

            self.dockWidget.setParent(None)
            self.dockWidget.setParent(new_parent)
            self.dockWidget.setFloating(True)
            self.dockWidget.setAllowedAreas(Qt.AllDockWidgetAreas)
            self.dockWidget.move(cursor_pos)
            self.dockWidget.show()

            #event = QMouseEvent(QEvent.MouseButtonPress,  # type
            #                    self.dockWidget.pos(),  # local position
            #                    Qt.LeftButton,  # button
            #                    Qt.LeftButton,  # buttons
            #                    Qt.NoModifier)  # modifiers

            # Post the event
            #QCoreApplication.postEvent(self.dockWidget, event)