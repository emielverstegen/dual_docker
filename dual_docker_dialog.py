# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DualDockerDialog
                                 A QGIS plugin
 This plugin creates an extra window to dock your panels on a second monitor
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-10-11
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Emiel Verstegen
        email                : emiel@verstegen.email
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

import logging
from qgis.core import QgsMessageLog, Qgis

from PyQt5.QtWidgets import QLabel, QVBoxLayout, QMessageBox, QDockWidget

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dual_docker_dialog_base.ui'))


#class DualDockerDialog(QtWidgets.QMainWindow, FORM_CLASS):
class DualDockerDialog(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        """Constructor."""

        logging.info("Starting Dual Docker")
        QgsMessageLog.logMessage("Initializing", 'DualDocker', level=Qgis.Info)
        self.parent = parent
        #super(DualDockerDialog, self).__init__(parent)
        super(DualDockerDialog, self).__init__()

    def setupUi(self):
        self.setMinimumSize(500, 500)
        self.setWindowTitle('Dual Docker')
        self.setDockNestingEnabled(True)

        # Give it some layout. Seems to work better with layout. TODO: See if this can be removed
        layout = QVBoxLayout()
        self.label = QLabel(self)
        layout.addWidget(self.label)

        self.setLayout(layout)

    def closeEvent(self, event):
        """
        Is fired when the 'X' button on the dialog is clicked. Confirms closing and initiates reparinting widgets to QGIS MainWindow
        """
        # Ask for confirmation before closing
        confirmation = QMessageBox.question(self, "Confirmation", "Are you sure you want to close the Dual Docker window?", QMessageBox.Yes | QMessageBox.No)

        if confirmation == QMessageBox.Yes:
            self.returnWidgets()
            self.parent.plugin_button.setChecked(False)
            event.accept()  # Close the app
        else:
            event.ignore()  # Don't close the app



    def returnWidgets(self):
        """
        Iterates over all child widgets. If they are QDockWidgets they are reparented back to the QGIS MainWindow
        """
        QgsMessageLog.logMessage("Closing DualDocker", 'DualDocker', level=Qgis.Info)
        children = self.children()

        # Loop over all children and reparent them back to the mainWindow
        for child in children:
            if isinstance(child, QDockWidget):
                QgsMessageLog.logMessage(f"Reparenting {child.objectName()}", 'DualDocker', level=Qgis.Info)

                #Reparent widget back to main window
                self.parent.reparent(child, self.parent.iface.mainWindow())

